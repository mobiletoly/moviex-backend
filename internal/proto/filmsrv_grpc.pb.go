// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: internal/proto/filmsrv.proto

package rpcmoviex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilmClient is the client API for Film service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmClient interface {
	GetFilms(ctx context.Context, in *GetFilmsRequest, opts ...grpc.CallOption) (*GetFilmsResponse, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	GetCategoryByFilmID(ctx context.Context, in *GetByFilmIdRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	GetActor(ctx context.Context, in *GetActorRequest, opts ...grpc.CallOption) (*GetActorResponse, error)
	GetActorsByFilmID(ctx context.Context, in *GetByFilmIdRequest, opts ...grpc.CallOption) (*GetActorsResponse, error)
}

type filmClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmClient(cc grpc.ClientConnInterface) FilmClient {
	return &filmClient{cc}
}

func (c *filmClient) GetFilms(ctx context.Context, in *GetFilmsRequest, opts ...grpc.CallOption) (*GetFilmsResponse, error) {
	out := new(GetFilmsResponse)
	err := c.cc.Invoke(ctx, "/proto.Film/GetFilms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.Film/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetCategoryByFilmID(ctx context.Context, in *GetByFilmIdRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.Film/GetCategoryByFilmID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetActor(ctx context.Context, in *GetActorRequest, opts ...grpc.CallOption) (*GetActorResponse, error) {
	out := new(GetActorResponse)
	err := c.cc.Invoke(ctx, "/proto.Film/GetActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) GetActorsByFilmID(ctx context.Context, in *GetByFilmIdRequest, opts ...grpc.CallOption) (*GetActorsResponse, error) {
	out := new(GetActorsResponse)
	err := c.cc.Invoke(ctx, "/proto.Film/GetActorsByFilmID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmServer is the server API for Film service.
// All implementations must embed UnimplementedFilmServer
// for forward compatibility
type FilmServer interface {
	GetFilms(context.Context, *GetFilmsRequest) (*GetFilmsResponse, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	GetCategoryByFilmID(context.Context, *GetByFilmIdRequest) (*GetCategoryResponse, error)
	GetActor(context.Context, *GetActorRequest) (*GetActorResponse, error)
	GetActorsByFilmID(context.Context, *GetByFilmIdRequest) (*GetActorsResponse, error)
	mustEmbedUnimplementedFilmServer()
}

// UnimplementedFilmServer must be embedded to have forward compatible implementations.
type UnimplementedFilmServer struct {
}

func (UnimplementedFilmServer) GetFilms(context.Context, *GetFilmsRequest) (*GetFilmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilms not implemented")
}
func (UnimplementedFilmServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedFilmServer) GetCategoryByFilmID(context.Context, *GetByFilmIdRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByFilmID not implemented")
}
func (UnimplementedFilmServer) GetActor(context.Context, *GetActorRequest) (*GetActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActor not implemented")
}
func (UnimplementedFilmServer) GetActorsByFilmID(context.Context, *GetByFilmIdRequest) (*GetActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorsByFilmID not implemented")
}
func (UnimplementedFilmServer) mustEmbedUnimplementedFilmServer() {}

// UnsafeFilmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmServer will
// result in compilation errors.
type UnsafeFilmServer interface {
	mustEmbedUnimplementedFilmServer()
}

func RegisterFilmServer(s grpc.ServiceRegistrar, srv FilmServer) {
	s.RegisterService(&Film_ServiceDesc, srv)
}

func _Film_GetFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Film/GetFilms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetFilms(ctx, req.(*GetFilmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Film/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetCategoryByFilmID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByFilmIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetCategoryByFilmID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Film/GetCategoryByFilmID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetCategoryByFilmID(ctx, req.(*GetByFilmIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Film/GetActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetActor(ctx, req.(*GetActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_GetActorsByFilmID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByFilmIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).GetActorsByFilmID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Film/GetActorsByFilmID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).GetActorsByFilmID(ctx, req.(*GetByFilmIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Film_ServiceDesc is the grpc.ServiceDesc for Film service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Film_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Film",
	HandlerType: (*FilmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilms",
			Handler:    _Film_GetFilms_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Film_GetCategory_Handler,
		},
		{
			MethodName: "GetCategoryByFilmID",
			Handler:    _Film_GetCategoryByFilmID_Handler,
		},
		{
			MethodName: "GetActor",
			Handler:    _Film_GetActor_Handler,
		},
		{
			MethodName: "GetActorsByFilmID",
			Handler:    _Film_GetActorsByFilmID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/filmsrv.proto",
}
